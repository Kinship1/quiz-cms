generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QuestionType {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("question_types")
}

model SubTopic {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  questions   Question[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("sub_topics")
}

model Question {
  id            String         @id @default(cuid())
  questionText  String
  options       Json          // Array of options
  correctAnswer Json          // Correct answer(s)
  explanation   String?
  questionType  QuestionType   @relation(fields: [typeId], references: [id])
  typeId        String
  subTopics     SubTopic[]
  quizQuestions QuizQuestion[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("questions")
}

model TempQuestion {
  id            String     @id @default(cuid())
  questionText  String
  options       Json      // Array of options
  correctAnswer Json      // Correct answer(s)
  explanation   String?
  typeId        String
  subTopicIds   String[]  // Array of sub-topic IDs
  status        String    @default("pending") // pending, approved, rejected
  rejectionReason String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("temp_questions")
}

model Quiz {
  id           String         @id @default(cuid())
  name         String
  description  String?
  config       Json          // Quiz configuration
  questions    QuizQuestion[]
  results      QuizResult[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@map("quizzes")
}

model QuizQuestion {
  id         String   @id @default(cuid())
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  quizId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  order      Int
  createdAt  DateTime @default(now())

  @@unique([quizId, questionId])
  @@map("quiz_questions")
}

model QuizResult {
  id        String   @id @default(cuid())
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    String
  userId    String   // Reference to your auth system's user ID
  score     Float
  answers   Json    // User's answers
  createdAt DateTime @default(now())

  @@map("quiz_results")
}